name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main # 또는 master, 메인 브랜치 이름에 맞게 조정
      - ",/"
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECS_CLUSTER: photo-look-cluster

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Frontend 컨테이너 빌드 및 배포
      - name: Build, tag, and push frontend image
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: photo-look-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f frontend/Dockerfile ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "frontend_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in frontend task definition
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: frontend/frontend-task-definition.json
          container-name: frontend-container
          image: ${{ steps.build-frontend.outputs.frontend_image }}

      - name: Deploy frontend to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          service: photo-look-frontend-service
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # Server 컨테이너 빌드 및 배포
      - name: Build, tag, and push server image
        id: build-server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: photo-look-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f server/Dockerfile ./server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "server_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in server task definition
        id: server-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: server/backend-task-definition.json
          container-name: backend-containe
          image: ${{ steps.build-server.outputs.server_image }}

      - name: Deploy server to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.server-task-def.outputs.task-definition }}
          service: photo-look-backend-service
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # Flask 컨테이너 빌드 및 배포
      - name: Build, tag, and push flask image
        id: build-flask
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: photo-look-flask
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f flask/Dockerfile ./flask
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "flask_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in flask task definition
        id: flask-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: flask/flask-task-definition.json
          container-name: flask-container
          image: ${{ steps.build-flask.outputs.flask_image }}

      - name: Deploy flask to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.flask-task-def.outputs.task-definition }}
          service: photo-look-flask-service
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
