version: "3"

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - app-network
    # EC2에서 SSL 인증서 사용 시 볼륨 추가
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_GOOGLE_CLOUD_API_KEY=${NEXT_PUBLIC_GOOGLE_CLOUD_API_KEY}
      - NEXT_PUBLIC_GEMINI_API_KEY=${NEXT_PUBLIC_GEMINI_API_KEY}
      - NEXT_PUBLIC_INSTAGRAM_ACCESS_TOKEN=${NEXT_PUBLIC_INSTAGRAM_ACCESS_TOKEN}
      - NEXT_PUBLIC_S3_ACCESS_KEY_ID=${NEXT_PUBLIC_S3_ACCESS_KEY_ID}
      - NEXT_PUBLIC_S3_SECRET_ACCESS_KEY=${NEXT_PUBLIC_S3_SECRET_ACCESS_KEY}
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 384M

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DB_PASS=${DB_PASS}
      - PORT=8080
      - TS_NODE_PROJECT=tsconfig.json
      # AWS 리전 설정 (필요시)
      - AWS_REGION=${AWS_REGION:-ap-northeast-2}
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 192M

networks:
  app-network:
    driver: bridge
