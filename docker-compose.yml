version: "3"

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
      - flask
    restart: always
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_GOOGLE_CLOUD_API_KEY=${NEXT_PUBLIC_GOOGLE_CLOUD_API_KEY}
      - NEXT_PUBLIC_GEMINI_API_KEY=${NEXT_PUBLIC_GEMINI_API_KEY}
      - NEXT_PUBLIC_INSTAGRAM_ACCESS_TOKEN=${NEXT_PUBLIC_INSTAGRAM_ACCESS_TOKEN}
      - NEXT_PUBLIC_S3_ACCESS_KEY_ID=${NEXT_PUBLIC_S3_ACCESS_KEY_ID}
      - NEXT_PUBLIC_S3_SECRET_ACCESS_KEY=${NEXT_PUBLIC_S3_SECRET_ACCESS_KEY}
      # HOST는 package.json에 이미 start 스크립트에 포함됨
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 384M

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DB_PASS=${DB_PASS}
      # server의 TypeScript 관련 환경 변수
      - PORT=8080
      - TS_NODE_PROJECT=tsconfig.json
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 192M

  flask:
    build:
      context: ./flask
      dockerfile: Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DISPLAY=:99
      - SELENIUM_DRIVER_EXECUTABLE_PATH=/usr/bin/chromedriver
      # Flask 앱에서 외부 접속 허용
      - FLASK_RUN_HOST=0.0.0.0
    command: ["python", "app.py", "--host=0.0.0.0"]
    restart: always
    networks:
      - app-network
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
    deploy:
      resources:
        limits:
          memory: 448M

networks:
  app-network:
    driver: bridge
